// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package sessionstore

import (
	json "encoding/json"

	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson_ff298983_decode_github_com_getblank_blank_sr_sessionstore_Conn(in *jlexer.Lexer, out *Conn) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "connId":
			out.ConnID = string(in.String())
		case "subscriptions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Subscriptions = make(map[string]interface{})
				} else {
					out.Subscriptions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					v1 = in.Interface()
					(out.Subscriptions)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_ff298983_encode_github_com_getblank_blank_sr_sessionstore_Conn(out *jwriter.Writer, in Conn) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"connId\":")
	out.String(string(in.ConnID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"subscriptions\":")
	if in.Subscriptions == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2_first := true
		for v2_name, v2_value := range in.Subscriptions {
			if !v2_first {
				out.RawByte(',')
			}
			v2_first = false
			out.String(string(v2_name))
			out.RawByte(':')
			out.Raw(json.Marshal(v2_value))
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}
func (v Conn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_ff298983_encode_github_com_getblank_blank_sr_sessionstore_Conn(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Conn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_ff298983_encode_github_com_getblank_blank_sr_sessionstore_Conn(w, v)
}
func (v *Conn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_ff298983_decode_github_com_getblank_blank_sr_sessionstore_Conn(&r, v)
	return r.Error()
}
func (v *Conn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_ff298983_decode_github_com_getblank_blank_sr_sessionstore_Conn(l, v)
}
func easyjson_ff298983_decode_github_com_getblank_blank_sr_sessionstore_Session(in *jlexer.Lexer, out *Session) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiKey":
			out.APIKey = string(in.String())
		case "userId":
			out.UserID = string(in.String())
		case "connections":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Connections = make([]*Conn, 0, 8)
			} else {
				out.Connections = nil
			}
			for !in.IsDelim(']') {
				var v3 *Conn
				if in.IsNull() {
					in.Skip()
					v3 = nil
				} else {
					v3 = new(Conn)
					(*v3).UnmarshalEasyJSON(in)
				}
				out.Connections = append(out.Connections, v3)
				in.WantComma()
			}
			in.Delim(']')
		case "lastRequest":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastRequest).UnmarshalJSON(data))
			}
		case "__v":
			out.V = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_ff298983_encode_github_com_getblank_blank_sr_sessionstore_Session(out *jwriter.Writer, in Session) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"apiKey\":")
	out.String(string(in.APIKey))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"userId\":")
	out.String(string(in.UserID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"connections\":")
	out.RawByte('[')
	for v4, v5 := range in.Connections {
		if v4 > 0 {
			out.RawByte(',')
		}
		if v5 == nil {
			out.RawString("null")
		} else {
			(*v5).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lastRequest\":")
	out.Raw((in.LastRequest).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"__v\":")
	out.Int(int(in.V))
	out.RawByte('}')
}
func (v Session) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_ff298983_encode_github_com_getblank_blank_sr_sessionstore_Session(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Session) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_ff298983_encode_github_com_getblank_blank_sr_sessionstore_Session(w, v)
}
func (v *Session) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_ff298983_decode_github_com_getblank_blank_sr_sessionstore_Session(&r, v)
	return r.Error()
}
func (v *Session) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_ff298983_decode_github_com_getblank_blank_sr_sessionstore_Session(l, v)
}
